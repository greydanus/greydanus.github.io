I"àP<div class="imgcap_noborder" style="display: block; margin-left: auto; margin-right: auto; width:100%">
  <img src="/assets/sparsity/david.png" />
</div>

<p>Someone once asked Michaelangelo how he carved the statue of David. Was it difficult? ‚ÄúNo,‚Äù he replied, ‚ÄúIt was easy. I just chipped away the stone that didn‚Äôt look like David.‚Äù When we think of building new things, we tend to think about adding materials together to create something larger and more complex. But this is not always what happens. In the case of David, the creative process was one of gradual subtraction.</p>

<p>There is a whole field of science built on applying this principle to how data is processed. It is called sparse computing. Pioneered in the US in the 1950s and now led by large companies like NVIDIA and small startups like Numenta and Moffett AI, it has become an important factor in modern chip design. Sparse computing makes it easier to process large quantities of data by removing the bits of data - and it turns out that there are always many of them - which don‚Äôt count.</p>

<p>This technique is becoming particularly important in the field of artificial intelligence. AI models, which are being used to fold proteins, drive Teslas, process medical images, and translate languages [refs], have grown so large that they are hard to run on normal computers. The largest ones, called ‚Äúfoundation models‚Äù [ref], can cost millions of dollars in electricity just to develop. Some of them are so large that they have to be kept on specialized hardware [ref]. But by using sparsity to gradually remove unnecessary parameters, researchers are finding ways to make them hundreds of times smaller, and thus usable for commercial applications.</p>

<p>In order to see how this is done, let‚Äôs begin by taking a closer look at how sparse computing works.</p>

<h3 id="how-sparse-computing-works">How sparse computing works</h3>

<p>In the early days of computer processors, scientific progress was measured in how many transistors could be made to fit on a chip and how fast the processor‚Äôs clock speed was as it processed instructions.</p>

<p>The reason sparse computing is so vital today is that computing progress is no longer that simple. Firstly, a processor on its own is inadequate. The processor now needs to be a system-on-a-chip (SoC) or more commonly a ‚Äúplatform‚Äù, which combines software and hardware into one processing engine. Secondly, due to the exponentially increasing volumes of data being processed in AI applications, the problem of speed has now become four problems: how to improve speed and accuracy while at the same time reducing power consumption and cost.</p>

<p>Sparse computing is the key to building platforms that perform well along all four of these dimensions. To see how this works, let‚Äôs begin by looking at how it is applied to neural networks at a technical level.</p>

<h3 id="sparsity-in-neural-networks">Sparsity in neural networks</h3>

<p>Neural networks consist of a set of simulated neurons ‚Äì analogous to the neurons which make up a biological brain ‚Äì and a set of weighted connections between them. In these models, the behavior of a single neuron can be written as \(f(x \cdot w)\), where \(w\) is an ordered list, also called a vector, of \(N\) numbers which together represent the synaptic weights of a neuron. They describe the strength of the neuron‚Äôs connections to \(N\) of its neighbors. Meanwhile, \(x\) is a vector of equal length which describes the activations of those neighbors. The function \(f\) is called the ‚Äúactivation function‚Äù and is analogous to the threshold function in biological neurons.</p>

<p>[diagram]</p>

<p>Simulating the behavior of this virtual neuron involves calculating a dot product between two vectors of length and then applying \(f\) to the result. You might imagine how a group of \(M\) of these neurons, all with the same number of synaptic connections, could be represented with a \(M \times N\) matrix where each row is a separate neuron. In the same way, \(B\) different activations ‚Äì each related to a different stimulus ‚Äì could be stacked atop one another to form a \(B \times N\) matrix. Using these groupings, we could compute the responses of a group of \(M\) neurons to \(B\) different inputs with a single matrix multiplication: \(X \cdot W^{T}\).<sup id="fnref:fn3" role="doc-noteref"><a href="#fn:fn3" class="footnote">1</a></sup></p>

<p>[diagram]</p>

<p>So far, we‚Äôve assumed that every neuron has a connection to every element in the activation vector. But this is not generally the case, either in biological systems or artificial ones. It‚Äôs much more common for a neuron to have a few strong synapses and let the rest to be zero. Neuron activations tend to be sparse as well. This means that sparse matrices are a natural way to represent both the \(W\) and \(X\) matrices.</p>

<p>[diagram]</p>

<h3 id="types-of-sparsity-in-neural-networks">Types of sparsity in neural networks</h3>

<p>For early neural network researchers, the importance of sparsity was reinforced when they looked at the human brain. At the time, it was rare for people to stack more than a few layers of neurons atop one another. In these types of ‚Äúshallow‚Äù networks, the total number of synapses would grow quadratically with the number of neurons. But this is not what was happening in the brain.</p>

<p><strong>Synaptic sparsity.</strong> By some estimates, the human brain has 86 billion neurons [ref] and 150 trillion synapses [ref]. These numbers imply that only 0.000005%<sup id="fnref:fn1" role="doc-noteref"><a href="#fn:fn1" class="footnote">2</a></sup> of the possible connections between neurons are actually present. In other words, the connectivity of the brain is 99.999995% sparse. In this regime, the total number of synapses grows linearly with the number of neurons. Each biological neuron gets a fixed number of connections and this number doesn‚Äôt change even as the total number of neurons increases. Researchers call this property <em>synaptic sparsity</em>.</p>

<p><strong>Activation sparsity.</strong> The human brain is not only sparse in synapses; it is also sparse in neuron activations. The energy consumed by a biological neuron is roughly proportional to the number of times it fires [ref]. So the fewer neurons that fire in the brain, the less energy it consumes. The brain uses this <em>activation sparsity</em> to save energy. By contrast, a simulated neuron like the one we described above consumes the same amount of energy regardless of whether it fires or not. If its output is zero, that zero still gets multiplied with other numbers.</p>

<p><strong>Double sparsity.</strong> It turns out that these two types of sparsity are complementary to one another. Intuitively, activation sparsity allows signals to be routed through specific subsets of a network while synaptic sparsity keeps those subsets small and efficient. Working together, they lead to much greater efficiency gains than would be possible if only one were being used. Researchers suspect that this ‚Äúdouble sparsity‚Äù is what permits the brain to be so powerful and efficient [ref].</p>

<p>[diagram showing three types of sparsity]</p>

<h3 id="a-short-history-of-sparsity-in-neural-networks">A short history of sparsity in neural networks</h3>

<p>Neural network researchers of the 1990‚Äôs were aware of the benefits of sparsity and put a great deal of effort into sparsifying their models. They used approaches like weight magnitude regularization, magnitude pruning, and the cheerily named ‚ÄúOptimal Brain Damage‚Äù to achieve high levels of synaptic sparsity. These works show that sparsity was important to AI researchers even in the early days of the field.</p>

<p>Even so, sparse neural networks were destined to languish through the 2000‚Äôs and early 2010‚Äôs. That they languished in the 2000‚Äôs should come as no surprise. That era, known as the AI Winter, was a time when funding for neural network research dropped precipitously. Progress slowed across all subfields including sparsity. But the fact that sparsity languished in the early 2010‚Äôs is more surprising. This was a time when AI more broadly was swept up in a massive tidal wave of interest and funding. During this so-called AI Spring, progress in other areas of AI occurred at a dizzying pace. And yet sparsity stagnated. How could this be?</p>

<p>Perhaps it was because there were so many other fruitful ways to improve models. First of all, there was better data. Since the 1990‚Äôs, the internet had exploded into popular culture; this made it possible for researchers to construct massive datasets from publicly available data. Second, computing infrastructure grew much better. Not only did computers in general improve, but researchers found that they could massively accelerate their models by putting them on GPUs. A third important event was the rise of automatic differentiation (autodiff) frameworks like Theano, TensorFlow, and PyTorch. These frameworks made it easier to design new models, train them on specialized hardware, and interact with large datasets.</p>

<p>It‚Äôs worth noting that neither the GPUs nor the autodiff frameworks were amenable to sparse matrix operations. And so while they enabled big advances in model size and architecture, they made it difficult for researchers to reap rewards from sparsity. As long as significant progress was happening in other areas, this was to remain the case. But as the 2010‚Äôs drew to a close, questions of energy efficiency and the compute-vs-accuracy tradeoff became more pressing. The promise of sparsity began to sweeten.</p>

<h3 id="the-promise-of-sparsity-sweetens">The promise of sparsity sweetens</h3>

<p>By 2020, AI models and datasets were growing more quickly than the availability of compute. We can take as an example three famous AI models: ResNet (2014) had 0.25 million parameters, BERT (2018) had 3.4 million parameters, and GPT-2 and 3 (2019 and 2020) had 1.5 and 175 billion parameters.</p>

<p>Meanwhile, the rate of improvement in chip technology was beginning to slow. Moore‚Äôs Law, which had held steady for several decades, was beginning to break down as the sizes of transistors shrank to the limits set by physics. This led to a world in which computing power was increasingly scarce. In this world, the computational benefits of sparsity started to look very attractive.<sup id="fnref:fn4" role="doc-noteref"><a href="#fn:fn4" class="footnote">3</a></sup></p>

<p><strong>Steps toward sparsity.</strong> One of the early signs that a transition towards sparsity is underway is that academic publications referencing sparsity have increased dramatically in the past five years. In 2020, NVIDIA released a chip called the A100 which featured a ‚Äúsparsity processing unit‚Äù (SPU) with a 2x performance boost. Around the same time, Google researchers took a first step towards adding sparsity support to Tensor Processing Units (‚Äú<a href="https://dl.acm.org/doi/10.1145/3392717.3392751">Sparse-TPU</a>‚Äù). Since then, other companies, like Intel and Microsoft, have taken steps towards supporting sparse AI models.<sup id="fnref:fn5" role="doc-noteref"><a href="#fn:fn5" class="footnote">4</a></sup></p>

<h3 id="the-unrealized-potential-of-sparsity">The unrealized potential of sparsity</h3>

<p>While these recent developments are moving in the right direction, it is important to put them in context. Researchers have shown that many models can be pruned until they are well over 95% sparse without damaging performance. Naively, this would suggest that such models could be made twenty times smaller and more efficient by adding synaptic sparsity <em>alone</em>. And yet, existing speedups due to model sparsification are closer to a factor of two.</p>

<p><strong>The hardware problem.</strong> So far, companies have made incremental modifications to existing chip architectures, but they have not unlocked the order of magnitude gains that are available in theory. One reason that progress has been slow is that sparsity is a difficult hardware problem. Adding full sparsity support means representing matrices and vectors differently on hardware. It means structuring the implementations of dot products differently. It means parallelizing computations in different ways. There is a growing consensus that, in order to accommodate these changes, AI chips need to be rebuilt from the ground up.</p>

<p><strong>Startups.</strong> This task, which requires daring and flexibility, is well suited for startups. Indeed, some of the best work being done in this area is happening at small companies. Numenta, a Bay Area startup, recently demonstrated a custom chip with hardware support that runs a popular vision architecture 100 times faster than more traditional chips. Another company, NeuralMagic, offers model sparsification for shrinking foundation models so that they can run on laptop CPUs instead of expensive data center GPUs. But in order to realize the full potential of sparsity, the industry is going to need to design both hardware and software together. So far, only a few startups have tried to do this. One of the most interesting and ambitious of these companies is Moffett AI.</p>

<h3 id="moffett-ai-and-the-path-to-double-sparsity">Moffett AI and the path to double sparsity</h3>

<p>Moffett AI, a small startup founded in 2018, is focused specifically on building hardware and software infrastructure to support <em>double sparsity</em>.</p>

<p><strong>Double sparsity.</strong> Double sparsity, as we discussed earlier, refers to sparsity in both the weights and activations of neural networks. The image below gives an intuitive comparison of the differences between dense-dense operations, which the majority of AI chips use currently, dense-sparse operations, which some chips like the NVIDIA A100 offer, and ‚Äúdouble sparse‚Äù operations which Moffett supports. One thing to notice is that using double sparsity permits researchers to evaluate the products of much larger matrices while using the same amount of memory, compute, and energy. In the image above, this leads to efficiency gains of one to two orders of magnitude. In other words, Moffett‚Äôs approach permits researchers to train and evaluate models that are 10-100x larger for the same cost.</p>

<p>[diagram]</p>

<p><strong>Four benefits of double sparsity.</strong> The practical benefits of double sparsity are fourfold: they include increased speed, higher accuracy, less energy consumption and lower cost. To make these benefits more concrete, let‚Äôs compare Moffett‚Äôs latest double sparse chip, the ANTOUM, to its dense-dense and dense-sparse counterparts.</p>

<p>[diagram]</p>

<p>The first thing to notice is that it can run sparse models 32x and 8x faster than its two respective baselines. These gains are important because model latency matters a great deal in real-world settings. For example, a self-driving car needs to be able to process frames at a rate of at least 30 fps in order to avoid obstacles while moving at 60 miles per hour. As another example, internet users begin to lose interest in a webpage if its latency grows beyond a few dozen milliseconds, meaning that neural networks used to filter information on these webpages need to perform inference in around one millisecond.</p>

<p>The second benefit of double sparse is that it allows us to run higher accuracy models for the same computational budget. Because inference is 8-32x faster on the ANTOUM, it can run 8-32x larger models, which tend to be much more accurate.</p>

<p>A similar line of reasoning is behind the third benefit, which is less energy consumption. The energy that a chip consumes is roughly proportional to the number of mathematical operations it performs. Since double sparse hardware ignores all the activations and weights that are set to zero, it saves the energy that would have been used to multiply them to get more zeros. These savings end up being between 8-32x as well. And since the cost of running a model scales with the amount of energy it uses, the ANTOUM is 8-32x cheaper to operate.</p>

<h3 id="co-designing-hardware-and-software">Co-designing hardware and software</h3>

<p>Of course, these numbers are far from static. As the AI chip industry grows and evolves, the ANTOUM and its baselines will soon be replaced by newer and better models. Given this observation, one of the things that really matters in chip design is potential for future improvements. ANTOUM is interesting because it is a first generation chip with a long roadmap of future improvements. For example, the theoretical efficiency gains that double sparsity offers are much higher than 8-32x. Depending on the model, they can be 100-1000x.</p>

<p>In order to realize these additional benefits, Moffett is focusing on co-designing sparse hardware and software together. Intuitively, this is a good idea because the best way to implement sparse operations in software tends to depend on the chip being used. Meanwhile, the best double sparse chip designs depend on the types of sparse models being run, and how those models are represented at the software level.</p>

<p>Take, for example, Moffett‚Äôs approach to running convolutional neural networks for computer vision. These models organize visual data along spatial and channel dimensions. Intuitively, the spatial dimensions organize activations according to where they occur in a scene and the channel dimensions do so according to what is in the image. Given that objects, even common ones like wheels and eyes, occur infrequently throughout an image, Moffett‚Äôs researchers realized that it is possible to make the channel dimension very sparse. Starting from this software observation, they adjusted the chip‚Äôs physical design to take advantage of the smaller channel dimension.</p>

<p>This fertile cross-pollination between hardware and software teams is rare at larger companies. It‚Äôs much easier to achieve at small startups like Moffett, where the same researchers tend to be involved in both areas of development. While sometimes this occurs naturally, company structure also plays an important role. In the case of Moffett, for example, its founders chose each other with hardware and software co-design in mind. Two are hardware experts, one is a sparsity software expert, and the fourth has a background in both. Having joined together under a common banner, Moffett‚Äôs founders have the unique combination of skills needed to make progress on double sparsity.</p>

<h3 id="closing-thoughts">Closing thoughts</h3>

<p>Although the industry has started to put more time and energy into sparsity, there are many inefficiencies that have yet to be chiseled away. In coming years, we will need to adapt everything in AI ‚Äì from chip design to low-level compilers and CUDA kernels to high-level autodiff frameworks ‚Äì to better accommodate sparsity. Companies like Moffett are in a good position to lead this revolution. It is very possible that the infrastructure they are building now will, in a few years, be running the most powerful AI models in the world.</p>

<h3 id="footnotes">Footnotes</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:fn3" role="doc-endnote">
      <p>Which is really just a group of vector dot products.¬†<a href="#fnref:fn3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fn1" role="doc-endnote">
      <p>We obtained this number as follows: \(\quad \textrm{sparsity} = \frac{\textrm{observed number of connections}}{\textrm{possible connections btwn $N$ neurons}} = \frac{150 \times 10^{12}}{N*(N-1)/2} = \frac{150 \cdot 10^{12}}{(86\cdot10^9)(86\cdot10^9-1)/2} = 4\cdot10^{-8}\)¬†<a href="#fnref:fn1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fn4" role="doc-endnote">
      <p>‚ÄúThings that deal with sparse parallelism,‚Äù said Raja Koduri, Intel‚Äôs head of chip architecture, ‚Äú‚Ä¶will give rise to some new architectural ideas that are very different from what we are doing in vector-matrix, which is very mainstream right now.‚Äù¬†<a href="#fnref:fn4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:fn5" role="doc-endnote">
      <p>As just one example, in early 2022, Intel advertised an ‚ÄúIntel Neural Compressor‚Äù tool aimed at model sparsification.¬†<a href="#fnref:fn5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET